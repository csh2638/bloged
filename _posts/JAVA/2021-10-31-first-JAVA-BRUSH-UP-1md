---
layout: post
title: "[Java] Java Brush Up - 1"
categories: JAVA
tags: [JAVA]
---

### 숫자

자바에서 따옴표('', "")가 없는 숫자는 숫자로 인식한다.

~~~java

System.out.println(100);    // 숫자 100
System.out.println("100");  // 문자 100

~~~

### 문자와 문자열

자바에서 문자와 문자열을 구분해서 사용한다. 문자는 한 글자를 뜻하고 문자열은 두 글자 이상으로 구성된 문자를 뜻한다. 문자는 작은 따옴표('')를 사용하고 문자열은 큰 따옴표("")를 사용해야 한다.

~~~java

System.out.println('A');      // 문자 'A'
System.out.println("Hello");  // 문자열 "Hello"

System.out.println("A");      // 문자에 큰 따옴표 사용 가능, 문자도 문자열이 될 수 있기 때문이다. 단 이때 문자가 아닌 문자열로 처리된다.
System.out.println('Hello');  // 문자열은 작은따옴표 사용 불가능

~~~

## 이스케이프

문자열을 출력할때 작은 따옴표('')나 큰 따옴표("")등의 기호를 사용할때 앞에 '\'를 붙여 사용할 수 있다.

~~~java

System.out.println("\"Hello world\"");

~~~

## 줄바꿈

\n을 사용해 줄바꿈을 사용할 수 있다.

~~~java

System.out.println("Hello world\n Hello java");

~~~

## 변수형

|분류|이름|바이트 수|실제 값|
|:---:|:---:|:---:|:---:|
|정수형|byte|1|-127 ~ +128|
|정수형|short|2|-32,768 ~ + 32,767|
|정수형|int|4|-2,147,483,648 ~ +2,147,483,647|
|정수형|long|8|-9,223,372,036,854,775,808 ~ +9,223,372,036,854,775,807|
| |
|실수형|float|4|유효자리수 7자리, ex)3.1415926
|실수형|double|8|유효자리수 15~16자리, float보다 높은 정밀도가 필요할때 사용|
| |
|문자형|char|2|유니코드 문자|
| |
|논리형|boolean|1|TRUE, FALSE|

변수가 메모리를 차지하는 크기는 변수형에 따라 달라진다. 예를들어 같은 int형 변수에 각각 10과 1000000을 저장했을때, 두 변수가 차지하는 메모리 공간은 같다.

특정 변수형 범위 안의 값을 할당했음에도 데이터 타입 오류가 발생할 수 있다. 이때는 할당할 값 뒤에 원하는 변수형을 직접 지정하는 방법을 사용할 수 있다.  

~~~java

float a = 2.2F;         // F
long b = 2147483649L // L

~~~

### 형변환

변수형을 바꾸는 것을 형변환이라 하고 ***자동 형 변환*** 과 ***명시적 형 변환*** 이 있다.

### 자동 형 변환

표현범위가 상대적으로 좁은 변수형에서 높은 변수형으로 변환이 자동으로 이루어 진다.
반대의 경우는 불가능 하다.

byte > short > int > long > float > double

~~~java

double a = 2.2F;         
float b = 31234L;

~~~

### 명시적 형 변환

자동 형 변환이 되지 않는 경우에 직접 형 변환을 통해 데이터 타입을 바꿀 수 있다.

~~~java

int a = (int)100.0F;         
float b = (int)101.1F;

~~~

## 연산자

|연산자|계산|
|:---:|:---:|
|+|더하기|
|-|빼기|
|*|곱하기|
|/|나누기|
|%|나머지|

같은 변수형의 숫자끼리 연산자를 통해 계산을 하게 된다면 문제가 없지만 만약 다른 변수형을 가진 숫자끼리 계산하면 자동 형 변환에 의해 결과가 바뀔 수 있다.

~~~java

int a = 100;         
float b = 3.14F;

System.out.println(a/b)

~~~

이 예제의 경우 int형과 float형 간의 계산이 이루어 진다. 자동 형 변환으로 인해 a가 float형으로 형 변환이 되어 결과값으로 31.847... 즉 float형의 값을 출력하게 된다.


## 단항 연산자

|연산자|계산|
|:---:|:---:|
|+|양수|
|-|음수|
|++|1증가|
|--|1감소|

~~~java
int a = 9;

a++;
System.out.println(a):   // 10
System.out.println(++a): // 11
System.out.println(a++): // 11
System.out.println(a): // 12

~~~

다음과 같이 ++의 위치에 따라 1이 더해지는 순서에 영향을 끼친다. ++a의 경우 1을 바로 더해 값이 반영되고, a++의 경우 a에 1을 더하지만 바로 값이 반영되지 않아 다음에 a를 호출해 보면 1이 증가되어 있음을 확인할 수 있다.
